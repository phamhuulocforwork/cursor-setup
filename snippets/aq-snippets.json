{
  "Default Page": {
    "scope": "react, typescript, typescriptreact, javascriptreact, tsx, jsx",
    "prefix": "dfpage",
    "body": [
      "\"use client\";",
      "",
      "import { MyPageContent } from \"aq-fe-framework/components\";",
      "",
      "export default function Page() {",
      "  return (",
      "    <MyPageContent",
      "      title=\"${1:Title}\"",
      "    >",
      "      ${2:children}",
      "    </MyPageContent>",
      "  );",
      "}"
    ]
  },
  "Custom Modal": {
    "prefix": "ctmodal",
    "body": [
      "\"use client\";",
      "",
      "import { Stack } from \"@mantine/core\";",
      "import { useForm } from \"@mantine/form\";",
      "import { useDisclosure } from \"@mantine/hooks\";",
      "import { MyButton, MyButtonModal } from \"aq-fe-framework/components\";",
      "",
      "export default function ${1:ModalName}({ values }: { values: ${2:IDataType} }) {",
      "  const [opened, { open, close }] = useDisclosure(false);",
      "",
      "  // const query = useQuery({",
      "  //   queryKey: [\"\"],",
      "  //   queryFn: () => { return mockData; },",
      "  // });",
      "",
      "  const form = useForm<${2:IDataType}>({",
      "    initialValues: {",
      "      ...values,",
      "    },",
      "    validate: {",
      "    }",
      "  });",
      "",
      "  const handleSubmit = async (values: ${2:IDataType}) => {",
      "    console.log(values);",
      "    close();",
      "  };",
      "",
      "  return (",
      "    <MyButtonModal",
      "      crudType=\"default\"",
      "      variant=\"transparent\"",
      "      title=\"${2:Title}\"",
      "      disclosure={[opened, { open, close, toggle: () => open() }]}",
      "    >",
      "      <form onSubmit={form.onSubmit(handleSubmit)}>",
      "          ${3:children}",
      "          <MyButton type=\"submit\" w=\"full\">",
      "            Lưu",
      "          </MyButton>",
      "      </form>",
      "    </MyButtonModal>",
      "  );",
      "}"
    ]
  },
  "Select Table": {
    "prefix": "stable",
    "body": [
      "\"use client\";",
      "",
      "import { useForm } from \"@mantine/form\";",
      "import { useDisclosure } from \"@mantine/hooks\";",
      "import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";",
      "import { MyButton, MyButtonModal, MyDataTable } from \"aq-fe-framework/components\";",
      "import { MRT_ColumnDef } from \"mantine-react-table\";",
      "import { useMemo } from \"react\";",
      "",
      "export default function ${1:TableName}() {",
      "",
      "  const query = useQuery({",
      "    queryKey: [\"\"],",
      "    queryFn: () => { return mockData; },",
      "  });",
      "",
      "  const form = useForm<${3:IDataType}>({",
      "    initialValues: {",
      "    },",
      "    validate: {",
      "    }",
      "  });",
      "",
      "  const columns = useMemo<MRT_ColumnDef<${3:IDataType}>[]>(() => [",
      "    {",
      "      header: \"\",",
      "      accessorKey: \"\",",
      "    },",
      "  ], []);",
      "",
      "  const disc = useDisclosure();",
      "  const queryClient = useQueryClient();",
      "  const mutation = useMutation({",
      "    mutationFn: async (values: ${3:IDataType}) => {",
      "      return await console.log(values);",
      "    },",
      "    onSuccess: () => {",
      "      disc[1].close();",
      "      queryClient.invalidateQueries();",
      "",
      "      form.reset();",
      "    },",
      "  });",
      "",
      "  return (",
      "    <MyButtonModal disclosure={disc} crudType=\"create\" modalSize=\"90%\" title=\"${3:Title}\">",
      "      <form onSubmit={form.onSubmit((values) => {",
      "        mutation.mutate(values);",
      "      })}>",
      "        <MyDataTable",
      "          columns={columns}",
      "          data={query.data || []}",
      "          enableColumnFilters={true}",
      "          enableGlobalFilter={true}",
      "          enablePagination={true}",
      "          enableRowSelection={true}",
      "          renderTopToolbarCustomActions={({ table }) => (",
      "            <MyButton",
      "              crudType=\"create\"",
      "              form=\"form\"",
      "            >",
      "              Chọn",
      "            </MyButton>",
      "          )}",
      "        />",
      "      </form>",
      "    </MyButtonModal>",
      "  );",
      "}",
      "",
      "const mockData: ${3:IDataType}[] = [",
      "  ",
      "];"
    ],
    "description": ""
  },
  "Icon JSX": {
    "prefix": "jsxicon",
    "body": [
      "import { SVGProps } from \"react\";",
      "",
      "export default function ${1:Title}(props: SVGProps<SVGSVGElement>) {",
      "  return (",
      "    ${2:svg}",
      "  );",
      "}",
      ""
    ],
    "description": ""
  },
  "Read Table": {
    "prefix": "rtable",
    "body": [
      "\"use client\";",
      "",
      "import { useQuery } from \"@tanstack/react-query\";",
      "import { AQButtonExportData, MyCenterFull, MyDataTable, MyFieldset } from \"aq-fe-framework/components\";",
      "import { MRT_ColumnDef } from \"mantine-react-table\";",
      "import { useMemo } from \"react\";",
      "",
      "export default function ${1:TableName}() {",
      "",
      "  const query = useQuery({",
      "    queryKey: [\"\"],",
      "    queryFn: () => { return mockData; },",
      "  });",
      "",
      "  const exportConfig = {",
      "    fields: [",
      "      { fieldName: \"\", header: \"\" },",
      "    ],",
      "  };",
      "",
      "  const columns = useMemo<MRT_ColumnDef<IDataType>[]>(() => [",
      "    {",
      "      header: \"\",",
      "      accessorKey: \"\",",
      "    },",
      "  ], []);",
      "",
      "  return (",
      "    <MyFieldset",
      "      title=\"${2:Title}\"",
      "    >",
      "      <MyDataTable",
      "        columns={columns}",
      "        enableRowSelection={true}",
      "        renderTopToolbarCustomActions={({ table }) => {",
      "          return (",
      "            <>",
      "            </>",
      "          )",
      "        }}",
      "        renderRowActions={({ row }) => {",
      "          return (",
      "            <MyCenterFull>",
      "              children",
      "            </MyCenterFull>",
      "          )",
      "        }}",
      "        data={query.data ?? []}",
      "      />",
      "    </MyFieldset>",
      "  );",
      "}",
      "",
      "const mockData: IDataType[] = [",
      "];"
    ],
    "description": ""
  },
  "Create Button": {
    "prefix": "createbtn",
    "body": [
      "\"use client\";",
      "",
      "import { useForm } from \"@mantine/form\";",
      "import { useQuery } from \"@tanstack/react-query\";",
      "import { MyButtonCreate } from \"aq-fe-framework/components\";",
      "",
      "export default function ${1:CreateButton}() {",
      "",
      "  const query = useQuery({",
      "    queryKey: [\"\"],",
      "    queryFn: () => { return mockData; },",
      "  });",
      "",
      "  const form = useForm<any>({",
      "    initialValues: {",
      "    },",
      "    validate: {",
      "    }",
      "  });",
      "",
      "  return (",
      "    <MyButtonCreate",
      "      title=\"${2:Title}\"",
      "      form={form}",
      "      onSubmit={(values) => {",
      "        console.log(values);",
      "      }}",
      "    >",
      "      children",
      "    </MyButtonCreate>",
      "  );",
      "}",
      "",
      "const mockData: any[] = [",
      "];"
    ],
    "description": ""
  },
  "Action Update": {
    "prefix": "updatebtn",
    "body": [
      "\"use client\";",
      "",
      "import { useForm } from \"@mantine/form\";",
      "import { useQuery } from \"@tanstack/react-query\";",
      "import { MyActionIconUpdate } from \"aq-fe-framework/components\";",
      "",
      "export default function ${1:ActionIconUpdate}({ values }: { values: any }) {",
      "",
      "  const query = useQuery({",
      "    queryKey: [\"\"],",
      "    queryFn: () => { return mockData; },",
      "  });",
      "",
      "  const form = useForm<any>({",
      "    initialValues: {",
      "    },",
      "    validate: {",
      "    }",
      "  });",
      "",
      "  return (",
      "    <MyActionIconUpdate",
      "      title=\"${2:Title}\"",
      "      form={form}",
      "      onSubmit={(values) => {",
      "        console.log(values);",
      "      }}",
      "    >",
      "      children",
      "    </MyActionIconUpdate>",
      "  );",
      "}",
      "",
      "const mockData: any[] = [",
      "];"
    ],
    "description": ""
  },
  "Action Delete": {
    "prefix": "delbtn",
    "body": [
      "import { MyActionIconDelete } from \"aq-fe-framework/components\";",
      "",
      "export default function ${1:AcitonIconDelete}({ id, code }: { id: number, code: string }) {",
      "  return (",
      "    <MyActionIconDelete contextData={code} onSubmit={() => {",
      "      console.log(id);",
      "    }} />",
      "  );",
      "}"
    ],
    "description": ""
  },
  "Delete List Button": {
    "prefix": "dellistbtn",
    "body": [
      "import { MyButtonDeleteList } from \"aq-fe-framework/components\";",
      "",
      "const mapData = (data: any) => {",
      "  return data.map((item: any) => item.code).join(\", \");",
      "}",
      "",
      "export default function ${1:ButtonDeleteList}({ data }: { data: any }) {",
      "  return (",
      "    <MyButtonDeleteList onSubmit={() => {",
      "      console.log(mapData(data))",
      "    }} contextData={mapData(data)} />",
      "  );",
      "}"
    ],
    "description": ""
  },
  "Import Button": {
    "prefix": "importbtn",
    "body": [
      "\"use client\";",
      "",
      "import { useModalsStack } from \"@mantine/core\";",
      "import { ModalImportId, MyButton, MyModalImport } from \"aq-fe-framework/core\";",
      "import { IUtils_Excel_ColumnConfig, utils_excel_download, utils_excel_exportExcel } from \"aq-fe-framework/utils\";",
      "import ExcelJS from 'exceljs';",
      "",
      "const config: IUtils_Excel_ColumnConfig<IDataType>[] = [",
      "  {",
      "    fieldKey: \"\",",
      "    fieldName: \"\",",
      "    isRequired: true",
      "  },",
      "]",
      "",
      "export default function ${1:ImportButton}() {",
      "  const stack = useModalsStack<ModalImportId>([])",
      "  const handleExportStructure = async () => {",
      "    const workbook = new ExcelJS.Workbook();",
      "    await utils_excel_exportExcel<IDataType>({",
      "      workbook: workbook,",
      "      sheetName: \"\",",
      "      data: mockData,",
      "      config: config",
      "    })",
      "    utils_excel_download({ name: \"\", workbook })",
      "  }",
      "  return (",
      "    <>",
      "      <MyModalImport",
      "        fieldDefinition={",
      "          [",
      "            { key: \"\", label: \"\" },",
      "          ]",
      "        }",
      "        stack={stack}",
      "        onExportStructure={() => {",
      "          handleExportStructure()",
      "        }}",
      "        onExecute={(values) => {",
      "          //NOTE: Dữ liệu sau khi map data",
      "          console.log(values)",
      "        }}",
      "      />",
      "      <MyButton actionType=\"import\" onClick={() => stack.open(\"FileImportConfig\")} />",
      "    </>",
      "  );",
      "}",
      "",
      "const mockData: IDataType[] = [",
      "  {",
      "    code: 1,",
      "    name: \"1\"",
      "  },",
      "  {",
      "    code: 2,",
      "    name: \"2\"",
      "  }",
      "]"
    ],
    "description": ""
  }
}
